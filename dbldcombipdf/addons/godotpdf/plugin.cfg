[plugin]

name="GodotPDF"
description="Provides basic PDF creation and exporting functionality.
Basic usage requirements below.
sample.gd has a sample usage of the plugin

1. initialize new PDF object
	( PDF.newPDF(Title(Optional), Creator(Optional)) )

	PDF.newPDF() MUST be called prior to any other functions
	PDF Title and Creator can be passed into the constructor
	or can be set using setTitle() and setCreator() functions

2. add pages
	( PDF.newPage() )

	1 page is automatically added when creating a PDF object
	Keep in mind page sizes are 612x792 units when setting position/size

3. adding text using newLabel()
	( PDF.newLabel(pageNum, labelPosition, labelText, labelSize(Optional), font(Optional)) )

	pageNum (int) references the page to put the text on (1-based indexing)
	labelPosition (Vector2) sets the position on the page to draw the text
	labelText (String) sets the text the label object is to display
	labelSize (int, Optional) sets the label size in .pt
	font (String, Optional) set the font for the object using a previously added font. Default is Helvetica

4. adding fonts using newFont()
	( PDF.newFont(fontName, fontPath) )
	
	fontName is the name of the font to be used in newLabel()
	fontPath is the path to the font .ttf file

5. adding boxes using newBox()
	( PDF.newBox(pageNum, boxPosition, boxSize, fillColor(Optional), borderColor(Optional), borderWidth(Optional)) )

	pageNum (int) references the page to put the box on (1-based indexing)
	boxPosition (Vector2) sets the position on the page to draw the box
	boxSize (Vector2) sets the size of the box on the page
	fillColor (Color, Optional) sets the box fill color (Black if blank) (no fill if null)
	borderColor (Color, Optional) sets the box border color (no border if blank or null)
	borderWidth (int, Optional) sets the box border width (default: 2)

6. adding images using newImage()
	( PDF.newImage(pageNum, imagePosition, image, imageSize(Optional)) )
	
	pageNum (int) references the page to put the image on (1-based indexing)
	imagePosition (Vector2) sets the position on the page to draw the image
	image contains the image object to draw (You can use Image.create_from_file(path) to load an image)
	imageSize (Vector2, Optional) sets the size of the image on the page (Defaults to base image size)

7. exporting using export()
	( PDF.export(path) )

	path (String) specifies the target file to export the PDF to
	(Note: no file type checking is done, make sure the path points to a .pdf)


8. Regarding exported projects...
	Due to the way the plugin has to read files, specifically font and image files,
	any images/fonts that you are exporting with your project must change their export
	type to KEEP or the plugin won't function correctly. To change file export types
	click on the file in the FileSystem dock, click the Import tab (Usually next to 
	the Scene tab), Click the dropdown below 'Import As:' and select 'Keep File (exported
	as is)'

Copyright CouchBrotato 2025"
author="CouchBrotato"
version="1.5"
script="plugin.gd"
